
Optime API
==========

Creada con arquitectura hexagonal + vertical slicing + screaming.
Esta arquitectura busca desacoplar las capas del sistema, facilitando pruebas, cambios y la incorporación de nuevos componentes.

1. Domain (Dominio)
-------------------

El dominio es el corazón de la aplicación. Aquí se define la lógica de negocio central, que no depende de detalles de infraestructura. Las entidades, repositorios y excepciones específicas del dominio viven aquí.

Archivos Clave:
    - Entidades: Las clases principales que representan los modelos de datos, como Notification, Payment, User.
      Ejemplo: `src/notifications/domain/Notification.py`

    - Interfaces de Repositorio: Las interfaces para interactuar con el almacenamiento de datos. Son contratos abstractos que definen qué operaciones se pueden realizar en el dominio.
      Ejemplo: `src/notifications/domain/NotificationRepository.py`

    - Excepciones: Excepciones propias del dominio que se lanzan en caso de que la lógica de negocio encuentre problemas.
      Ejemplo: `src/notifications/domain/exceptions.py`


2. Application (Aplicación)
---------------------------

La capa de aplicación contiene los casos de uso de la lógica de negocio. Aquí se orquestan las operaciones principales que utilizan las entidades del dominio y ejecutan la lógica para diferentes escenarios. Esta capa utiliza los repositorios del dominio, pero no conoce detalles de la implementación (base de datos o servicios externos).

Archivos Clave:
    - Casos de uso: Son clases que implementan la lógica necesaria para manejar operaciones específicas, como crear, actualizar o eliminar notificaciones.
      Ejemplo: `src/notifications/application/NotificationCreator.py`

    - Aplicación de Servicios: Aquí se agrupan y coordinan las interacciones entre las entidades del dominio.
      Ejemplo: `src/notifications/application/NotificationSender.py`


3. Infrastructure (Infraestructura)
-----------------------------------

La capa de infraestructura contiene todos los detalles sobre cómo se implementan las dependencias. Aquí es donde se define cómo los repositorios interactúan con la base de datos, cómo se manejan las peticiones HTTP o cómo se conectan con servicios externos.

Archivos Clave:
    - Adaptadores de Repositorio: Implementaciones concretas de los repositorios, como interactuar con la base de datos.
      Ejemplo: `src/notifications/infrastructure/MySqlNotificationRepository.py`

    - Controladores HTTP: Controladores que manejan las peticiones HTTP y exponen los endpoints de la API.
      Ejemplo: `src/notifications/infrastructure/NotificationRoutes.py`

    - Conexión a Servicios Externos: Implementaciones para integraciones con servicios externos (como Mercado Pago, APIs de mensajería, etc.).
      Ejemplo: `src/payments/infrastructure/PaymentRoutes.py`

    - Configuraciones de Base de Datos: Detalles sobre la configuración y conexión a la base de datos.
      Ejemplo: `src/config/database.py`


Primeros pasos
==============

**Requerimientos:**
  - MySQL server
  - Python 3.11
  - ngrok

**Instalación del Proyecto:**
  1. Clonar el repositorio.
  2. Crear un entorno virtual con el comando: `python -m venv venv`.
  3. Instalar los requerimientos con el comando: `pip install -r requirements.txt`.
  4. Correr el archivo `config/create_db_user.sql` en tu administrador de base de datos.
  5. Crear un archivo `.env` como el ejemplo que viene en el proyecto (el script `create_db_user.sql` ya tiene los datos de la base de datos).
  6. Cambiar los tokens de los servicios a utilizar (Mercado Pago, MetaAPI).
  7. Correr el comando `alembic upgrade head`.
  8. Correr el comando `uvicorn main:app --reload`.
  9. Correr el comando `ngrok http 8000` (Necesario para poder hacer pruebas con el webhook de Mercado Pago).
  10. Testear los endpoints con Postman. La documentación de los endpoints está disponible en el siguiente enlace: [Documentación de Postman](https://documenter.getpostman.com/view/16907391/UUy1eZ6T).
  11. Para correr los tests, ejecutar el comando: `pytest`.

